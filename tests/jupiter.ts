import { VersionedTransaction } from "@solana/web3.js";
import { assert } from "chai";
import fetch from "cross-fetch";
import { describe } from "mocha";
import SolanaParser from "../src";
import { getConnection } from "./utils/connection";
import { getLookupTableAccounts } from "./utils/transactions";

async function Jupiter() {
	console.log("calling Jupiter test");

	it("should parse versioned transaction with lookup tables", async function () {
		const connection = getConnection();

		const tokens = await (await fetch("https://token.jup.ag/all")).json();

		const solanaParser = new SolanaParser({
			connection,
			walletAddress: "8uqKsED1fpqAtPrPVV84m1Rxd9gmQ63LZxeRP5L3LyRK",
			tokens,
		});

		const serializedTx = [
			1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 1, 0, 7, 14, 117, 138,
			166, 241, 84, 56, 222, 60, 243, 111, 11, 178, 224, 95, 179, 61, 246, 177,
			21, 112, 54, 217, 32, 157, 254, 64, 116, 8, 12, 191, 49, 90, 18, 92, 59,
			6, 62, 190, 21, 214, 214, 143, 222, 159, 6, 232, 169, 94, 204, 21, 250,
			193, 212, 3, 59, 251, 32, 34, 135, 187, 119, 25, 83, 226, 83, 239, 119,
			170, 242, 131, 121, 42, 62, 91, 4, 49, 204, 55, 23, 12, 121, 178, 10, 46,
			118, 234, 233, 96, 50, 171, 186, 27, 177, 125, 172, 132, 119, 4, 122, 56,
			28, 57, 21, 56, 247, 163, 186, 66, 186, 254, 132, 29, 69, 63, 38, 213, 46,
			113, 166, 100, 67, 246, 175, 30, 221, 116, 138, 253, 163, 130, 146, 219,
			10, 158, 231, 176, 110, 77, 141, 200, 246, 218, 251, 220, 154, 167, 62,
			118, 93, 199, 70, 31, 7, 19, 107, 228, 144, 179, 138, 242, 164, 18, 18,
			156, 211, 120, 92, 174, 169, 204, 244, 60, 183, 23, 105, 73, 236, 204, 71,
			14, 84, 132, 129, 110, 94, 180, 14, 153, 150, 89, 65, 76, 233, 212, 72,
			139, 7, 254, 57, 155, 26, 145, 85, 229, 130, 27, 105, 125, 67, 1, 108, 10,
			60, 79, 59, 188, 162, 175, 180, 29, 1, 99, 48, 87, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
			6, 70, 111, 229, 33, 23, 50, 255, 236, 173, 186, 114, 195, 155, 231, 188,
			140, 229, 187, 197, 247, 18, 107, 44, 67, 155, 58, 64, 0, 0, 0, 4, 121,
			213, 91, 242, 49, 192, 110, 238, 116, 197, 110, 206, 104, 21, 7, 253, 177,
			178, 222, 163, 244, 142, 81, 2, 177, 205, 162, 86, 188, 19, 143, 6, 221,
			246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235, 121, 172, 28,
			180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133, 126, 255, 0, 169, 140,
			151, 37, 143, 78, 36, 137, 241, 187, 61, 16, 41, 20, 142, 13, 131, 11, 90,
			19, 153, 218, 255, 16, 132, 4, 142, 123, 216, 219, 233, 248, 89, 172, 26,
			227, 208, 135, 242, 146, 55, 6, 37, 72, 247, 12, 76, 4, 174, 194, 169,
			149, 105, 73, 134, 231, 203, 180, 103, 82, 6, 33, 211, 134, 48, 180, 63,
			250, 39, 245, 215, 246, 74, 116, 192, 155, 31, 41, 88, 121, 222, 75, 9,
			171, 54, 223, 201, 221, 81, 75, 50, 26, 167, 179, 140, 229, 232, 130, 34,
			23, 28, 111, 184, 32, 173, 68, 51, 58, 113, 68, 58, 74, 6, 58, 251, 209,
			128, 219, 26, 153, 152, 165, 49, 3, 234, 50, 83, 199, 193, 4, 8, 0, 5, 2,
			192, 92, 21, 0, 11, 6, 0, 5, 0, 42, 7, 10, 1, 1, 9, 65, 10, 12, 0, 1, 6,
			3, 5, 39, 42, 9, 9, 13, 9, 47, 45, 35, 46, 39, 4, 6, 31, 30, 34, 12, 48,
			36, 33, 10, 32, 9, 41, 10, 44, 43, 12, 4, 27, 26, 3, 29, 28, 37, 10, 12,
			22, 2, 23, 6, 21, 24, 20, 25, 40, 37, 10, 12, 19, 3, 15, 2, 14, 18, 16,
			17, 38, 51, 193, 32, 155, 51, 65, 214, 156, 129, 5, 4, 0, 0, 0, 8, 0, 20,
			0, 1, 3, 100, 1, 4, 17, 0, 80, 0, 3, 17, 0, 100, 3, 4, 64, 66, 15, 0, 0,
			0, 0, 0, 91, 27, 188, 2, 0, 0, 0, 0, 30, 0, 0, 10, 3, 5, 0, 0, 1, 9, 4,
			171, 166, 151, 205, 172, 101, 4, 59, 100, 137, 168, 2, 186, 210, 226, 248,
			55, 213, 165, 90, 172, 159, 62, 15, 77, 177, 62, 75, 174, 163, 185, 84, 6,
			97, 95, 89, 92, 91, 90, 3, 37, 93, 120, 7, 139, 84, 4, 149, 40, 119, 236,
			93, 36, 112, 165, 104, 6, 240, 125, 141, 10, 114, 195, 242, 75, 170, 110,
			190, 41, 240, 0, 162, 59, 75, 87, 6, 240, 245, 238, 239, 235, 242, 2, 241,
			127, 87, 46, 12, 238, 222, 57, 179, 46, 47, 115, 128, 218, 137, 62, 233,
			179, 149, 121, 39, 115, 24, 38, 101, 151, 211, 87, 224, 111, 38, 98, 57,
			55, 4, 79, 80, 81, 82, 3, 233, 76, 78, 183, 140, 36, 105, 217, 234, 173,
			127, 8, 211, 27, 206, 251, 100, 96, 37, 142, 63, 224, 63, 66, 244, 30,
			250, 84, 16, 247, 143, 36, 41, 126, 111, 7, 69, 66, 37, 62, 67, 39, 38, 4,
			60, 64, 61, 68,
		];

		const txDeserialized = Buffer.from(serializedTx);

		const tx = VersionedTransaction.deserialize(txDeserialized);

		const tableAccounts = await getLookupTableAccounts(tx);

		const lookupAddreses = tx.message.addressTableLookups.map(
			(addressTableLookup, tableIndex) => {
				return {
					writable: addressTableLookup.writableIndexes.map(
						(index) => tableAccounts[tableIndex].state.addresses[index]
					),
					readonly: addressTableLookup.readonlyIndexes.map(
						(index) => tableAccounts[tableIndex].state.addresses[index]
					),
				};
			}
		);
		const readonly = lookupAddreses.flatMap((x) => x.readonly);
		const writable = lookupAddreses.flatMap((x) => x.writable);
		const loadedAddresses = { readonly, writable };

		const instruction = await solanaParser.parseInstruction(
			tx.message,
			loadedAddresses
		);

		assert.equal(instruction.type, "JUPITER_SWAP");
	});
}

describe("Jupiter", Jupiter);
